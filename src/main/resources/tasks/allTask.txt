ТЕМЫ:
---------------------------------------------------------------------
1. Основы программирования на Java. Создание простейших приложений.
---------------------------------------------------------------------
ОСНОВНЫЕ ЗАДАЧИ:
1. Разработать простое консольное приложение.
2. Сформировать иерархии классов и интерфейсов, сделать реализацию методов.
3. Сделать начальный ввод данных при запуске приложения через параметры командной строки:
	количество вводимых объектов;
	вид представления.
4. После запуска приложения с клавиатуры вводятся данные объекта и выводятся на консоль.
5. При запуске приложения в зависимости от вида представления создается класс потомка.
6. Объекты реализуются через наследование: интерфейс → абстрактный класс → наследники.
Создать интерфейс ICrudAction, задающий действия над объектом (create, read, update, delete):
create – заполнение объекта случайными значениями и инкремент счётчика.
read – вывод данных на экран.
update – ввод данных с клавиатуры.
delete – принудительное зануление данных в объекте и декремент счетчика.
Создать иерархию классов, определяющих объекты по варианту и реализующих интерфейс IcrudAction.
7. Сделать счётчик объектов в базовом абстрактном классе.
8. Сделать ID объекта в базовом абстрактном классе.
ID инициализируется в конструкторе объекта. Используйте класс UUID.
9. Сделать перегрузку конструкторов в классах-наследниках.

ДЛЯ РЕШЕНИЯ:
- Установить ОС Linux Ubuntu 16 LTS или версией выше (http://ubuntu.ru/get).
- Установить Oracle Java SE 8, следуя инструкциям (http://help.ubuntu.ru/wiki/java).
НЕ УСТАНАВЛИВАЙТЕ OpenJDK.
Сразу переходите к разделу «Установка Oracle Java сторонним скриптом от проекта webupd8.org (JRE и JDK)».
- Скачать среду разработки IntelliJ IDEA (https://www.jetbrains.com/idea/)

ВАРИАНТЫ:
Вариант 1
Список объектов продажи состоит из двух видов напитков: чай и кофе.
Поля базового класса:
ID товара
Название
Цена
Счётчик товаров
Фирма поставщик
Страна производитель

Поля для чая:
Вид упаковки

Поля для кофе:
вид кофейных зёрен (арабика, робуста)

Вариант 2
Список объектов продажи элетроники 3-х видов: телефоны, сматфоны и планшеты.
Поля базового класса:
ID товара
Название
Цена
Счётчик товаров
Фирма
Модель
ОС

Поля для телефонов:
Тип корпуса (классический, раскладушка)

Поля для сматфонов:
Тип SIM-карты (micro-SIM, обычная)
Количество SIM-карт

Поля для планшетов:
Видеопроцессор
Разрешение экрана


Вариант 3
Список объектов продажи состоит из двух типов спортивной одежды: футболки и кепки.
Поля базового класса:
ID товара
Название
Цена
Счётчик товаров
Фирма-производитель


Вариант 4
Список объектов продажи состоит из трёх типов техники: телевизоры, телеприставки, игровые консоли.
Вся техника может быть разных моделей.
Поля базового класса:
ID товара
Название
Цена
Счётчик товаров
Фирма
Модель


Вариант 5
Список объектов продажи состоит из трёх типов: краски, инструменты, стройматериалы.
Поля базового класса:
ID товара
Название
Артикул
Цена
Счётчик товаров
Фирма-производитель

---------------------------------------------------------------------
2. Классы-коллекции.
---------------------------------------------------------------------
ОСНОВНЫЕ ЗАДАЧИ:
1. Изучить особенности реализации классов-коллекций в Java.
2. Доработать программу, разработанную ранее.
3. Разработать класс для хранения и обработки персональных данных пользователей  Credentials (Поля: ID, Фамилия, Имя, Отчество, e-mail).
4. Разработать класс-коллекцию «корзину» (ShoppingCart) для сгенерированных объектов по варианту.
При операции add происходит добавление объекта в «корзину».
При операции delеte происходит удаление объекта из «корзины».
5. Разработать класс «заказ» (Order).
6. Добавить для класса «заказ» поле «статус заказа» (в ожидании, обработан).
7. Добавить для класса «заказ» поля «время создания» и «время ожидания».
Время создания устанавливается в момент оформления покупки.
Время ожидания – время, через которое заказ должен исчезнуть (должен быть обработан), считая от времени создания.
8. Разработать класс-коллекцию «заказы» (Orders)  для объединения списка заказов.
9. Для класса «заказы» разработайте функцию «оформить покупку».
При выполнении данной функции «корзина» с товарами объединяется в объект «заказ» вместе с данными пользователя и добавляется в класс-коллекцию «заказы».
Реализовать отношение - агрегация. Агрегация (агрегирование по ссылке) — отношение «часть-целое» между двумя равноправными объектами,
когда один объект (контейнер) имеет ссылку на другой объект.
10. Добавить функцию проверки заказов - обход коллекции и удаление всех объектов, время ожидания которых истекло и статус «обработан».
11. Для хранения сгенерированных идентификаторов товаров используйте коллекцию, удобную для поиска в соответствии с вашим вариантом.
12. Добавьте функцию поиска объекта в коллекции «корзина» по идентификатору.
13. Добавьте в класс-коллекцию «корзина» функцию «показать все объекты».
14. Добавьте в класс-коллекцию «заказы» функцию «показать все заказы».
15. Продемонстрировать в программе все новые функции.

ВАРИАНТЫ:
Вариант 1
Коллекция для хранения объектов в классе «корзина»: ArrayList
Коллекция для хранения объектов в классе «заказы»: LinkedList
Коллекция для хранения и поиска уникальных идентификаторов: HashSet
Коллекция для хранения объектов по времени создания: HashMap

Вариант 2
Коллекция для хранения объектов в классе «корзина»: LinkedList
Коллекция для хранения объектов в классе «заказы»: ArrayList
Коллекция для хранения и поиска уникальных идентификаторов: HashSet
Коллекция для хранения объектов по времени создания: TreeMap

Вариант 3
Коллекция для хранения объектов в классе «корзина»: ArrayList
Коллекция для хранения объектов в классе «заказы»: LinkedList
Коллекция для хранения и поиска уникальных идентификаторов: TreeSet
Коллекция для хранения объектов по времени создания: HashMap

Вариант 4
Коллекция для хранения объектов в классе «корзина»: LinkedList
Коллекция для хранения объектов в классе «заказы»: PriorityQueue
Коллекция для хранения и поиска уникальных идентификаторов: TreeSet
Коллекция для хранения объектов по времени создания: HashMap

Вариант 5
Коллекция для хранения объектов в классе «корзина»: ArrayList
Коллекция для хранения объектов в классе «заказы»: LinkedList
Коллекция для хранения и поиска уникальных идентификаторов: TreeSet
Коллекция для хранения объектов по времени создания: LinkedHashMap
